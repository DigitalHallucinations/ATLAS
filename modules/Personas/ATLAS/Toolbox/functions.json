[
    {
        "name": "context_tracker",
        "version": "1.0.0",
        "side_effects": "none",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Compile a normalized snapshot of the active conversation including recent highlights and participants.",
        "parameters": {
            "type": "object",
            "properties": {
                "conversation_id": {
                    "type": "string",
                    "description": "Identifier for the conversation being summarized."
                },
                "conversation_history": {
                    "type": "array",
                    "description": "Recent ordered messages that should be normalized into the snapshot.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "role": {
                                "type": "string"
                            },
                            "content": {
                                "type": "string"
                            },
                            "timestamp": {
                                "type": [
                                    "string",
                                    "number"
                                ]
                            }
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "description": "Optional summary override for the generated snapshot."
                },
                "highlights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional list of pre-selected highlight strings."
                }
            },
            "required": [
                "conversation_id"
            ]
        },
        "idempotency_key": {
            "required": true,
            "scope": "per-conversation"
        },
        "capabilities": [
            "conversation_state",
            "status_reporting"
        ],
        "providers": [
            {
                "name": "atlas_runtime",
                "priority": 0,
                "health_check_interval": 0
            }
        ]
    },
    {
        "name": "get_current_info",
        "version": "1.0.0",
        "side_effects": "none",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Get the current time, date, day, month and year, or timestamp based on the format specified.",
        "parameters": {
            "type": "object",
            "properties": {
                "format_type": {
                    "type": "string",
                    "enum": [
                        "time",
                        "date",
                        "day",
                        "month_year",
                        "timestamp"
                    ],
                    "default": "timestamp"
                },
                "timezone": {
                    "type": "string",
                    "description": "Optional IANA timezone identifier (e.g., \"America/New_York\"). Defaults to the configured timezone or UTC."
                }
            },
            "required": []
        },
        "idempotency_key": false,
        "cost_per_call": 0.0,
        "cost_unit": "USD",
        "capabilities": [
            "time_information",
            "date_information"
        ]
    },
    {
        "name": "google_search",
        "version": "1.0.0",
        "side_effects": "none",
        "default_timeout": 30,
        "auth": {
            "required": true,
            "type": "api_key",
            "env": "GOOGLE_API_KEY",
            "docs": "Set GOOGLE_API_KEY and GOOGLE_CSE_ID to use Google Programmable Search. When those are missing, configure SERPAPI_KEY as a fallback."
        },
        "allow_parallel": true,
        "description": "A Google search result API. When you need a short and clear answer to a specific question, you can use it. The input should be a search query.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "The search content."
                },
                "k": {
                    "type": "integer",
                    "default": 10,
                    "description": "Select the first k results in the search results as the response.",
                    "minimum": 1
                }
            },
            "required": [
                "query"
            ]
        },
        "idempotency_key": false,
        "cost_per_call": 0.005,
        "cost_unit": "USD",
        "capabilities": [
            "web_search",
            "knowledge_lookup"
        ],
        "providers": [
            {
                "name": "google_cse",
                "priority": 0,
                "health_check_interval": 300,
                "config": {
                    "api_key_env": "GOOGLE_API_KEY",
                    "api_key_config": "GOOGLE_API_KEY",
                    "cse_id_env": "GOOGLE_CSE_ID",
                    "cse_id_config": "GOOGLE_CSE_ID"
                }
            },
            {
                "name": "serpapi",
                "priority": 10,
                "health_check_interval": 300
            }
        ]
    },
    {
        "name": "priority_queue",
        "version": "1.0.0",
        "side_effects": "none",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Score and sort operational tasks to produce a prioritized execution list.",
        "parameters": {
            "type": "object",
            "properties": {
                "tasks": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "description": {
                                "type": "string"
                            },
                            "priority": {
                                "type": "integer"
                            },
                            "status": {
                                "type": "string"
                            },
                            "due_at": {
                                "type": "string",
                                "description": "ISO 8601 timestamp"
                            },
                            "tags": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "description": "Tasks to be evaluated and sorted."
                },
                "default_priority": {
                    "type": "integer",
                    "default": 3,
                    "description": "Priority level to use when a task does not specify one."
                },
                "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Optional maximum number of tasks to return."
                },
                "reference_time": {
                    "type": [
                        "string",
                        "object"
                    ],
                    "description": "Override the timestamp used when computing urgency."
                }
            },
            "required": []
        },
        "idempotency_key": {
            "required": true,
            "scope": "per-task-list"
        },
        "capabilities": [
            "task_management",
            "status_reporting"
        ],
        "providers": [
            {
                "name": "atlas_runtime",
                "priority": 0,
                "health_check_interval": 0
            }
        ]
    },
    {
        "name": "task_catalog_snapshot",
        "version": "1.0.0",
        "side_effects": "none",
        "default_timeout": 10,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Retrieve a filtered snapshot of the runtime task manifest catalog.",
        "parameters": {
            "type": "object",
            "properties": {
                "persona": {
                    "type": [
                        "string",
                        "array"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "description": "Restrict catalog entries to manifests targeting these personas."
                },
                "tags": {
                    "type": [
                        "string",
                        "array"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "description": "Return only tasks annotated with the supplied tags."
                },
                "required_skills": {
                    "type": [
                        "string",
                        "array"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter to manifests that require all listed skills."
                },
                "required_tools": {
                    "type": [
                        "string",
                        "array"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "description": "Filter to manifests that reference the provided tool identifiers."
                }
            },
            "required": []
        },
        "idempotency_key": false,
        "capabilities": [
            "task_catalog",
            "status_reporting"
        ]
    },
    {
        "name": "browser",
        "version": "1.0.0",
        "side_effects": "none",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Record a virtual browsing session including annotations and metadata for downstream summarisation.",
        "parameters": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Starting URL or resource identifier."
                },
                "instructions": {
                    "type": "string",
                    "description": "Optional instructions describing the goal of the visit."
                },
                "annotations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional notes or highlights captured during navigation."
                },
                "metadata": {
                    "type": "object",
                    "description": "Arbitrary metadata to retain with the visit."
                }
            },
            "required": [
                "url"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "web_navigation",
            "research"
        ]
    },
    {
        "name": "calendar_service",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Book lightweight calendar slots and retrieve existing reservations for personas without native calendar access.",
        "parameters": {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": [
                        "book",
                        "get",
                        "retrieve",
                        "list",
                        "availability"
                    ],
                    "description": "Calendar action to perform."
                },
                "calendar_id": {
                    "type": "string",
                    "description": "Identifier for the logical calendar to access. Defaults to 'primary'."
                },
                "slot_id": {
                    "type": "string",
                    "description": "Identifier of the slot to retrieve when using get/retrieve operations."
                },
                "title": {
                    "type": "string",
                    "description": "Title for the slot when booking."
                },
                "start": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp marking the slot start."
                },
                "end": {
                    "type": "string",
                    "format": "date-time",
                    "description": "ISO 8601 timestamp marking the slot end."
                },
                "description": {
                    "type": "string",
                    "description": "Optional extended description for the slot."
                },
                "location": {
                    "type": "string",
                    "description": "Optional location string for the slot."
                },
                "attendees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional attendee identifiers to associate with the slot."
                },
                "metadata": {
                    "type": "object",
                    "description": "Arbitrary metadata retained with the slot."
                }
            },
            "required": [
                "operation"
            ],
            "allOf": [
                {
                    "if": {
                        "properties": {
                            "operation": {
                                "const": "book"
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "title",
                            "start",
                            "end"
                        ]
                    }
                },
                {
                    "if": {
                        "properties": {
                            "operation": {
                                "enum": [
                                    "get",
                                    "retrieve"
                                ]
                            }
                        }
                    },
                    "then": {
                        "required": [
                            "slot_id"
                        ]
                    }
                }
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "calendar_read",
            "calendar_write"
        ]
    },
    {
        "name": "notebook",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Capture a structured research note inside a collaborative notebook.",
        "parameters": {
            "type": "object",
            "properties": {
                "notebook_id": {
                    "type": "string",
                    "description": "Logical notebook identifier."
                },
                "content": {
                    "type": "string",
                    "description": "Markdown-compatible note contents."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional tags describing the entry."
                },
                "metadata": {
                    "type": "object",
                    "description": "Arbitrary metadata stored with the entry."
                },
                "replace": {
                    "type": "boolean",
                    "description": "When true, replace existing entries for the notebook."
                }
            },
            "required": [
                "notebook_id",
                "content"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "note_taking",
            "knowledge_management"
        ]
    },
    {
        "name": "notification_service",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Send a notification message to the requested channel and recipients.",
        "parameters": {
            "type": "object",
            "properties": {
                "channel": {
                    "type": "string",
                    "description": "Delivery channel such as email, sms, or slack."
                },
                "message": {
                    "type": "string",
                    "description": "Body of the notification."
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional list of specific recipients."
                },
                "urgency": {
                    "type": "string",
                    "description": "Relative urgency level (low, normal, high)."
                },
                "metadata": {
                    "type": "object",
                    "description": "Structured metadata for audit trails."
                }
            },
            "required": [
                "channel",
                "message"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "notification_delivery",
            "engagement"
        ]
    },
    {
        "name": "dashboard_service",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Store a dashboard snapshot with numeric metrics and supporting commentary.",
        "parameters": {
            "type": "object",
            "properties": {
                "dashboard_id": {
                    "type": "string",
                    "description": "Identifier of the dashboard being updated."
                },
                "metrics": {
                    "type": "object",
                    "additionalProperties": {
                        "type": [
                            "number",
                            "string"
                        ]
                    },
                    "description": "Mapping of metric names to numeric values."
                },
                "notes": {
                    "type": "string",
                    "description": "Optional analyst notes."
                },
                "publish": {
                    "type": "boolean",
                    "description": "Flag indicating whether the snapshot is ready for stakeholders."
                }
            },
            "required": [
                "dashboard_id",
                "metrics"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "metrics_reporting",
            "analysis"
        ]
    },
    {
        "name": "spreadsheet",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Append or replace rows within a lightweight spreadsheet.",
        "parameters": {
            "type": "object",
            "properties": {
                "sheet_id": {
                    "type": "string",
                    "description": "Identifier for the sheet being updated."
                },
                "rows": {
                    "type": "array",
                    "items": {
                        "type": "object"
                    },
                    "description": "Rows to append or replace in the sheet."
                },
                "mode": {
                    "type": "string",
                    "enum": [
                        "append",
                        "update",
                        "replace"
                    ],
                    "default": "append",
                    "description": "How the provided rows should be applied."
                },
                "metadata": {
                    "type": "object",
                    "description": "Optional metadata describing the update."
                }
            },
            "required": [
                "sheet_id",
                "rows"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "data_management",
            "tabular_editing"
        ]
    },
    {
        "name": "atlas_dashboard",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Capture persona-specific initiative health updates for the ATLAS dashboard.",
        "parameters": {
            "type": "object",
            "properties": {
                "initiative": {
                    "type": "string",
                    "description": "Initiative or workstream name."
                },
                "health": {
                    "type": "string",
                    "description": "Qualitative health rating (e.g. green, amber, red)."
                },
                "summary": {
                    "type": "string",
                    "description": "Concise update highlighting progress and risks."
                },
                "metrics": {
                    "type": "object",
                    "description": "Optional numeric metrics to include in the dashboard snapshot."
                },
                "stakeholders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Stakeholders who should be notified about this change."
                }
            },
            "required": [
                "initiative",
                "health",
                "summary"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "atlas_operations",
            "status_reporting"
        ]
    },
    {
        "name": "roadmap_service",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Update a roadmap initiative with owner, status, and upcoming milestones.",
        "parameters": {
            "type": "object",
            "properties": {
                "initiative_id": {
                    "type": "string",
                    "description": "Unique identifier of the roadmap item."
                },
                "title": {
                    "type": "string",
                    "description": "Display title for the initiative."
                },
                "status": {
                    "type": "string",
                    "description": "Lifecycle status such as planned, in_progress, or blocked."
                },
                "owner": {
                    "type": "string",
                    "description": "Responsible owner for the initiative."
                },
                "milestones": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Key milestones or deliverables."
                },
                "notes": {
                    "type": "string",
                    "description": "Optional context or commentary."
                }
            },
            "required": [
                "initiative_id",
                "title",
                "owner"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "program_management",
            "planning"
        ]
    },
    {
        "name": "ticketing_system",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Create a ticket for follow-up work with assignee and tag support.",
        "parameters": {
            "type": "object",
            "properties": {
                "title": {
                    "type": "string",
                    "description": "Ticket title."
                },
                "description": {
                    "type": "string",
                    "description": "Detailed description of the work."
                },
                "priority": {
                    "type": "string",
                    "description": "Priority level such as low, medium, or high."
                },
                "assignees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional list of assignees."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional tags for filtering."
                },
                "status": {
                    "type": "string",
                    "description": "Initial ticket status."
                }
            },
            "required": [
                "title",
                "description"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "issue_tracking",
            "escalations"
        ]
    },
    {
        "name": "labor_market_feed",
        "version": "1.0.0",
        "side_effects": "compute",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Generate a synthetic labour market snapshot for the requested regions and skills.",
        "parameters": {
            "type": "object",
            "properties": {
                "regions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Regions or markets to analyse."
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Target skills or roles to include in the snapshot."
                },
                "timeframe": {
                    "type": "string",
                    "description": "Relative timeframe window such as 30d or 90d."
                }
            },
            "required": [
                "regions",
                "skills"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "labor_market_research",
            "trend_analysis"
        ]
    },
    {
        "name": "crm_service",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Log a structured customer interaction with optional tags and metadata.",
        "parameters": {
            "type": "object",
            "properties": {
                "contact_id": {
                    "type": "string",
                    "description": "Unique identifier for the contact."
                },
                "interaction_type": {
                    "type": "string",
                    "description": "Type of engagement such as call, meeting, or email."
                },
                "summary": {
                    "type": "string",
                    "description": "Short narrative describing the interaction."
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional tags that categorise the interaction."
                },
                "metadata": {
                    "type": "object",
                    "description": "Free-form metadata captured alongside the log."
                }
            },
            "required": [
                "contact_id",
                "interaction_type",
                "summary"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "crm_logging",
            "engagement_tracking"
        ]
    },
    {
        "name": "email_service",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Dispatch a structured email with support for CC and BCC recipients.",
        "parameters": {
            "type": "object",
            "properties": {
                "subject": {
                    "type": "string",
                    "description": "Email subject line."
                },
                "body": {
                    "type": "string",
                    "description": "Email body rendered as plain text."
                },
                "to": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Primary recipients."
                },
                "cc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Carbon copy recipients."
                },
                "bcc": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Blind carbon copy recipients."
                },
                "metadata": {
                    "type": "object",
                    "description": "Optional delivery metadata."
                }
            },
            "required": [
                "subject",
                "body",
                "to"
            ]
        },
        "idempotency_key": false,
        "capabilities": [
            "email_delivery",
            "communications"
        ]
    },
    {
        "name": "workspace_publisher",
        "version": "1.0.0",
        "side_effects": "write",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "description": "Publish a structured brief payload into a collaborative workspace channel.",
        "parameters": {
            "type": "object",
            "properties": {
                "workspace_id": {
                    "type": "string",
                    "description": "Identifier for the target workspace or space."
                },
                "channel_id": {
                    "type": "string",
                    "description": "Optional channel or room identifier within the workspace."
                },
                "body": {
                    "type": "object",
                    "description": "Structured content payload to publish."
                },
                "metadata": {
                    "type": "object",
                    "description": "Additional audit metadata or delivery context."
                }
            },
            "required": [
                "workspace_id",
                "body"
            ]
        },
        "idempotency_key": {
            "required": true,
            "scope": "per-workspace"
        },
        "capabilities": [
            "workspace_publishing",
            "brief_distribution"
        ]
    },
    {
        "name": "policy_reference",
        "version": "1.0.0",
        "side_effects": "none",
        "default_timeout": 5,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "idempotency_key": {
            "required": true,
            "scope": "per-query"
        },
        "cost_per_call": 0.0,
        "cost_unit": "USD",
        "capabilities": [
            "policy_lookup",
            "risk_assessment_support"
        ],
        "providers": [
            {
                "name": "builtin_policy",
                "priority": 0,
                "health_check_interval": 60
            }
        ],
        "description": "Retrieve internal safety and governance policy guidance relevant to a proposed action.",
        "parameters": {
            "type": "object",
            "properties": {
                "query": {
                    "type": "string",
                    "description": "Natural language description of the planned action or request requiring review."
                },
                "policy_ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional explicit policy identifiers to include in the response."
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional list of policy categories to filter by."
                },
                "include_full_text": {
                    "type": "boolean",
                    "default": false,
                    "description": "Whether to return full guidance text for each policy."
                },
                "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 5,
                    "default": 3,
                    "description": "Maximum number of policy entries to return."
                }
            },
            "required": [
                "query"
            ]
        }
    },
    {
        "name": "debian12_calendar",
        "version": "1.1.0",
        "side_effects": "filesystem",
        "default_timeout": 15,
        "auth": {
            "required": false
        },
        "allow_parallel": true,
        "idempotency_key": {
            "required": false,
            "guidance": "Provide a stable key for read operations when polling. Omit the key when issuing create, update, or delete requests."
        },
        "cost_per_call": 0.0,
        "cost_unit": "USD",
        "capabilities": [
            "calendar_read",
            "calendar_write"
        ],
        "providers": [
            {
                "name": "debian12_local",
                "priority": 0,
                "health_check_interval": 300
            }
        ],
        "requires_flags": {
            "create": [
                "type.personal_assistant.access_to_calendar",
                "type.personal_assistant.calendar_write_enabled"
            ],
            "update": [
                "type.personal_assistant.access_to_calendar",
                "type.personal_assistant.calendar_write_enabled"
            ],
            "delete": [
                "type.personal_assistant.access_to_calendar",
                "type.personal_assistant.calendar_write_enabled"
            ]
        },
        "description": "Interact with the Debian 12 on-device calendar to list, search, inspect, and manage events.",
        "parameters": {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "enum": [
                        "list",
                        "detail",
                        "search",
                        "create",
                        "update",
                        "delete"
                    ],
                    "description": "Calendar operation to perform."
                },
                "event_id": {
                    "type": "string",
                    "description": "Identifier of the event to fetch, update, or delete."
                },
                "query": {
                    "type": "string",
                    "description": "Text used to search titles, descriptions, and locations when operation is 'search'."
                },
                "start": {
                    "type": "string",
                    "description": "ISO 8601 timestamp that bounds the window for list/search operations or sets the start of a created/updated event."
                },
                "end": {
                    "type": "string",
                    "description": "ISO 8601 timestamp that bounds the window for list/search operations or sets the end of a created/updated event."
                },
                "calendar": {
                    "type": "string",
                    "description": "Optional calendar identifier (e.g., ICS file stem or account id)."
                },
                "limit": {
                    "type": "integer",
                    "minimum": 1,
                    "description": "Maximum number of events to return for list/search operations."
                },
                "title": {
                    "type": "string",
                    "description": "Event title when creating or updating an entry.",
                    "minLength": 1
                },
                "description": {
                    "type": "string",
                    "description": "Optional event description for create/update operations."
                },
                "location": {
                    "type": "string",
                    "description": "Optional location for create/update operations."
                },
                "all_day": {
                    "type": "boolean",
                    "description": "Whether the created or updated event should be treated as an all-day entry."
                },
                "attendees": {
                    "type": "array",
                    "description": "List of attendees to include when creating or updating an event.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "email": {
                                "type": "string",
                                "description": "Email address of the attendee."
                            },
                            "name": {
                                "type": "string",
                                "description": "Display name of the attendee."
                            },
                            "role": {
                                "type": "string",
                                "description": "Optional participation role (e.g., REQ-PARTICIPANT)."
                            },
                            "status": {
                                "type": "string",
                                "description": "Optional participation status (e.g., ACCEPTED)."
                            }
                        },
                        "required": [
                            "email"
                        ]
                    }
                }
            },
            "required": [
                "operation"
            ]
        },
        "idempotency_guidance": "Reads are idempotent and may use a stable key when polling. Create, update, and delete operations mutate the calendar and should not be retried automatically."
    }
]
